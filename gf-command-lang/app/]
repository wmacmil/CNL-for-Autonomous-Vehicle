{-# LANGUAGE GADTs, FlexibleInstances, KindSignatures, RankNTypes, TypeSynonymInstances #-}
{-# LANGUAGE UndecidableInstances #-}

module Synonymize where

import Drive
import qualified PGF (Tree, showExpr)
import PGF hiding (Tree, showExpr)

instance (Gf (Tree c)) => Show (Tree c) where
  show = PGF.showExpr [] . gf

-- idea : can canonically enforce a single AST for verification purposes given
-- two strings with unique ASTs
--
-- need to basically create an equivalence class of synonyms, which aren't
-- necessarily restricted to purely lexical items

-- AR : almost compositional function, via composOp used here
-- can think of this like a lens

treeMapfemalePersonIsWoman :: forall a. Tree a -> Tree a
treeMapfemalePersonIsWoman (GModObj GFemale GPerson) = GWoman
treeMapfemalePersonIsWoman GWoman                    = (GModObj GFemale GPerson)
treeMapfemalePersonIsWoman gp = composOp treeMapfemalePersonIsWoman gp

-- gr :: IO PGF
-- gr = readPGF "../pgf/Drive.pgf"

-- Dante magic
-- >>> gr <- readPGF "pgf/Drive.pgf"
-- >>> cat = startCat gr
-- >>> eng = head $ languages gr
-- >>> goToTheWoman = "go to the woman and the female person"
-- >>> goToTheWomanT1 = head $ head $ parseAll gr cat goToTheWoman
-- >>> goToTheWomanAST = fg $ goToTheWomanT1
-- >>> goToTheFemalePersonAST = treeMapfemalePersonIsWoman goToTheWomanAST :: GPosCommand
-- >>> goToTheFemalePersonT1 = gf goToTheFemalePersonAST
-- >>> linearize gr eng goToTheFemalePersonT1
-- "go to the female person and the woman"

-- main s = do
--   gr <- readPGF "Drive.pgf"
--   let cat = startCat gr
--   let eng = head $ languages gr
--   let treeS = head $ head $ parseAll gr cat s
--   let astS goToTheWomanAST = fg $ treeS
--   let treeS' = (treeMapfemalePersonIsWoman astS) :: GPosCommand
--   let s' = gf treeS'
--   return (linearize gr eng s')

-- transfer :: PGF.Tree -> PGF.Tree
-- -- transfer :: Tree a -> Tree a --Expr -> Expr
-- -- transfer :: Expr -> Expr
-- transfer x = gf (treeMapfemalePersonIsWoman (fg x))

-- Looking at the gf code
-- p -cat=UndetObj "female person"
-- ModObj Female Person


-- femalePersonIsWoman :: GUndetObj -> GUndetObj
-- femalePersonIsWoman (GModObj GFemale GPerson) = GWoman
-- femalePersonIsWoman GWoman                    = (GModObj GFemale GPerson)
-- femalePersonIsWoman x                         = x

-- -- littleMain :: String -> IO _
-- -- littleMain :: String -> IO GProp
-- littleMain s =
--   do
--     gr <- readPGF "Query.pgf"
--     let eng = head $ languages gr
--     let pr = mkCId "Prop"
--     let catProp = (\x -> mkType [] x []) pr
--     let x = fg $ head $ head $ PGF.parseAll gr catProp s
--     let y = compressNat x
--     return $ linearize gr eng $ gf $ y
--   -- where parse1 x = fg $ head $ head $ PGF.parseAll gr catProp x

-- main = do
--   gr <- readPGF "Drive.pgf"
--   cat = startCat gr
  

-- Dante magic
-- >>> gr <- readPGF "Drive.pgf"
-- >>> cat = startCat gr
-- >>> goToTheWoman = "go to the woman"
-- >>> goToTheWomanT1 = head $ head $ parseAll gr cat goToTheWoman
-- >>> goToTheWomanT1
-- EApp (EFun SimpleCom) (EApp (EApp (EFun ModAction) (EFun Go)) (EApp (EApp (EFun MkAdvPh) (EFun To)) (EApp (EApp (EFun WhichObject) (EFun The)) (EFun Woman))))
-- >>> eng = head $ languages gr
-- >>> goToTheWomanAST = fg $ goToTheWomanT1
-- >>> goToTheWomanAST :: GPosCommand
-- SimpleCom (ModAction Go (MkAdvPh To (WhichObject The Woman)))
-- >>> goToTheFemalePersonAST = treeMapfemalePersonIsWoman goToTheWomanAST :: GPosCommand
-- >>> goToTheFemalePersonAST
-- SimpleCom (ModAction Go (MkAdvPh To (WhichObject The (ModObj Female Person))))
-- >>> goToTheFemalePersonT1 = gf goToTheFemalePersonAST
-- >>> linearize gr eng goToTheFemalePersonT1
-- "go to the female person"

-- >>> goToTheFemalePersonT1 = transfer goToTheWomanT1
-- >>> :t goToTheFemalePersonT1
-- goToTheFemalePersonT1 :: Tree
-- >>> linearize gr eng goToTheFemalePersonT1


